{"version":3,"sources":["components/asteroid.jsx","components/image.jsx","components/navbar.jsx","components/outro.jsx","App.js","serviceWorker.js","index.js"],"names":["NearEarthObject","name","lastSeen","maxDiameter","minDiameter","dangerous","className","id","Math","round","imageDay","state","pic","copyright","fetch","response","json","data","this","setState","src","url","alt","title","date","React","Component","NavBar","href","outro","className-","App","useState","asteroids","setAsteroids","useEffect","getAsteroids","a","near_earth_objects","map","key","designation","orbital_data","last_observation_date","estimated_diameter","meters","estimated_diameter_max","estimated_diameter_min","is_potentially_hazardous_asteroid","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed9ebd48.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./css/asteroid.css\";\r\n\r\nconst NearEarthObject = ({\r\n  name,\r\n  lastSeen,\r\n  maxDiameter,\r\n  minDiameter,\r\n  dangerous,\r\n}) => {\r\n  return (\r\n    <div className=\"card\" id=\"idAsteroid\">\r\n      <h1 className=\"title\">{name}</h1>\r\n      <p className=\"neo\">\r\n        Date the Asteroid was Last Seen:\r\n        <br />\r\n        <span className=\"date\">{lastSeen}</span>\r\n      </p>\r\n      <p className=\"neo\">\r\n        Diameter in meters, between:\r\n        <br />\r\n        <span className=\"diam\">{Math.round(maxDiameter)}m</span> &{\" \"}\r\n        <span className=\"diam\">{Math.round(minDiameter)}m</span>\r\n      </p>\r\n      <p className=\"neo\">Fairly harmless Boy {dangerous}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NearEarthObject;\r\n","import React from \"react\";\r\nimport \"./css/image.css\";\r\n\r\nclass imageDay extends React.Component {\r\n  state = {\r\n    pic: null,\r\n    copyright: null\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const url =\r\n      \"https://api.nasa.gov/planetary/apod?api_key=bjuVUgfTLhIEoL8tiVwkom7V20gV7fquf0cNagKg\";\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    this.setState({ pic: data, copyright: data.copyright });\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        {!this.state.pic ? (\r\n          <div className=\"loading\">\r\n            <div className=\"container\">\r\n              <p className=\"head-er\">castynet@user-PC MINGW64 ~</p>\r\n              <p className=\"One\">$ Contacting the NASA ISS Server...</p>\r\n              <p className=\"Two\">$ Redirected to Area 51 US-G6 Database!</p>\r\n              <p className=\"Three\">$ Establishing connection to Area 51...</p>\r\n              <p className=\"Four\">| Success!</p>\r\n              <p className=\"Five\">$ Recieving Data...</p>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <img\r\n              className=\"imageCard\"\r\n              src={this.state.pic.url}\r\n              alt=\"NASA's pic of the day\"\r\n            />\r\n            <div className=\"detailsCard\">\r\n              <h1 className=\"title\">\r\n                IMAGE OF THE DAY:\r\n                <br />\r\n                {this.state.pic.title}\r\n              </h1>\r\n              <p>NASA's image of the day: {this.state.pic.date}</p>\r\n              {!this.state.copyright ? (\r\n                <p>By Nasa</p>\r\n              ) : (\r\n                <p>By: {this.state.copyright}</p>\r\n              )}\r\n              <p>\r\n                <br />\r\n                Below is a catalogue of asteroids from NASA and their reference\r\n                codes(i.e their names)\r\n              </p>\r\n            </div>\r\n          </>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default imageDay;\r\n","import React from \"react\";\r\nimport \"./css/navbar.css\";\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <>\r\n      <nav className=\"navbar visible-md visible-lg topnavbar menu menu--ama\">\r\n        <div className=\"centered\">\r\n          <a className=\" stlist\" href=\"https://riungemaina.xyz\">\r\n            Castynet\r\n          </a>\r\n          <a className=\"stlist\" href=\"#idAsteroid\">\r\n            Asteroids\r\n          </a>\r\n          <a className=\" stlist\" href=\"#idAbout\">\r\n            About\r\n          </a>\r\n          <a\r\n            className=\" stlist\"\r\n            href=\"https://www.castynet.co.ke/#sectionContact\"\r\n          >\r\n            Contact\r\n          </a>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./css/outro.css\";\r\n\r\nconst outro = () => {\r\n  return (\r\n    <>\r\n      <div className=\"footer\" id=\"idAbout\">\r\n        <div className=\"About\">\r\n          <h1 className=\"headingAbout\">About</h1>\r\n          <p className-=\"footerContent\">\r\n            The site displays data collected by NASA, the NASA Image of the Day\r\n            and some recent Near Earth Objects. It's real-time data obtained\r\n            through their open APIs. The site is built using ReactJS and hosted\r\n            on Deep Web Africa (the hosting keeps changing, but the site is\r\n            always somewhere, in a data center, safe:) The project is open\r\n            source and availabe on GitHub. All images are copyright of their\r\n            respective owners. See blog post on <u>blog.genZtech.xyz</u> for\r\n            more details on the project.\r\n            <br />\r\n            Created by Riunge Maina for Castynet.\r\n          </p>\r\n        </div>\r\n        <div className=\"Products\">\r\n          <h1 className=\"headingAbout\">Links</h1>\r\n          <ul className-=\"footerContent\">\r\n            <li>\r\n              <a href=\"https://www.instagram.com/castynet_/?hl=en\">\r\n                @castynet instagram\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a href=\"https://www.twitter.com/thebrownpirate\">Twitter</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"mailto:riungemaina@gmail.com\">Contact the Developer</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"https://github.com/castynet/react-nasa\">\r\n                project files, GitHub\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a href=\"https://www.nukesafaris.co.ke/\">NukeSafaris</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"https://www.riungemaina.xyz\">\r\n                Portfolio: I'm looking for a good job :)\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div className=\"copyright\">\r\n        <p>\r\n          copyright <span className=\"andCopy\">Â©</span> 2020 Castynet all rights\r\n          reserved.\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default outro;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Asteroids from \"./components/asteroid\";\nimport ImageoftheDay from \"./components/image\";\nimport NavBar from \"./components/navbar\";\nimport Outro from \"./components/outro\";\n\nconst App = () => {\n  const [asteroids, setAsteroids] = useState([]);\n\n  useEffect(() => {\n    getAsteroids();\n  }, []);\n\n  const getAsteroids = async () => {\n    const response = await fetch(\n      \"http://www.neowsapp.com/rest/v1/neo/browse?page=1920&size=12&api_key=bjuVUgfTLhIEoL8tiVwkom7V20gV7fquf0cNagKg\"\n    );\n    const data = await response.json();\n    setAsteroids(data.near_earth_objects);\n    //console.log(data.near_earth_objects);\n  };\n\n  return (\n    <>\n      <NavBar />\n      <div className=\"page\">\n        <ImageoftheDay />\n      </div>\n      <div className=\"page\">\n        {asteroids.map(NearEarthObject => (\n          <Asteroids\n            key={NearEarthObject.id}\n            name={NearEarthObject.designation}\n            lastSeen={NearEarthObject.orbital_data.last_observation_date}\n            maxDiameter={\n              NearEarthObject.estimated_diameter.meters.estimated_diameter_max\n            }\n            minDiameter={\n              NearEarthObject.estimated_diameter.meters.estimated_diameter_min\n            }\n            dangerous={NearEarthObject.is_potentially_hazardous_asteroid}\n          />\n        ))}\n      </div>\n      <Outro />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n//Run Offline\nserviceWorker.unregister();\n"],"sourceRoot":""}